#include "Set.cpp"

// print function which use iterator to print every element in a set.print function which uses itorator
template <typename C>
void print(const Set<C> & s)
{
  
  for(typename set<c>::iterator itr = s.begin(); itr != s.end(); ++itr){
    cout << *itr << ", ";
   
  }
}

//overload set operator + which returns a new set which is the union of two sets.
template <typename C>
Set<C> operator+(const Set<C> & s1, const Set<C> & s2)
{
  Set<C> result;
  
  for(typename set<C>::iterator itr = s1.begin(); itr != s1.end(); itr++){
    result.insert(*itr);
  }
  for(typename set<C>::iterator itr = s2.begin(); itr != s2.end(); itr++){
    result.insert(*itr);
  }
  return result;
}


//overload set operator - which returns the set difference between two sets
template <typename C>
Set<C> operator-(const Set<C> & s1, const Set<C> & s2)
{
  Set<C> result;
  // ADD YOUR CODE return result;
  for(typename set<C>::iterator itr = s1.begin(); itr != s1.end(); itr++){
    result.insert(*itr);
  }
  for(typename set<C>::iterator itr = s2.begin(); itr != s2.end(); itr++){
    result.remove(*itr);
  }
  
}


//implement set intersection function which returns the intersection of two sets.
template <typename C>
Set<C> operator*(const Set<C> & s1, const Set<C> & s2)
{
  Set<C> result;
  // ADD YOUR CODE return result;
  for(typename set<C>::iterator itr = s1.begin(); itr != s1.end(); itr++){
    if(s2.contains(*itr)){
      result.insert(*itr);
    }

}

int main()
{
  Set<int> setA;
  Set<int> setB;
  int intin;

  //setA
  cout << "enter int for set A (to stop enter 0): " << endl;
  cin >> intin;
  while(intin != 0){
    setA.insert(intin);
    cin >> intin;
  }
  cout << "printed values of set A:" << endl; 
  print(setA);

  //setB
  cout << "enter int for set B (to stop enter 0): " << endl;
  cin >> intin;
  while(intin != 0){
    setB.insert(intin);
    cin >> intin;
  }
  cout << "printed values of set B:" << endl; 
  print(setB);

  //union int
  Set<int> theUnion = setA + setB;
  cout << " the union of setA and setB: ";
  print(theUnion);
  cout << endl;

  //difrence int
  Set<int> difrence = setA - setB;
  cout << " the difference of setA and setB: ";
  print(difrence);
  cout << endl;

  //intersection 
  Set<int> intersection = setA * setB;
  cout << " the intersection of setA and setB: ";
  print(theUnion);
  cout << endl;

  



  Set<string> setC;
  Set<string> setD
  string
  //setC
  cout << "enter int for set C (to stop enter 0): " << endl;
  cin >> intin;
  while(intin != 0){
    setA.insert(intin);
    cin >> intin;
  }
  cout << "printed values of set A:" << endl; 
  print(setA);

  //setB
  cout << "enter int for set B (to stop enter 0): " << endl;
  cin >> intin;
  while(intin != 0){
    setB.insert(intin);
    cin >> intin;
  }
  cout << "printed values of set B:" << endl; 
  print(setB);

  //union int
  Set<int> theUnion = setA + setB;
  cout << " the union of setA and setB: ";
  print(theUnion);
  cout << endl;

  //difrence int
  Set<int> difrence = setA - setB;
  cout << " the difference of setA and setB: ";
  print(difrence);
  cout << endl;

  //intersection 
  Set<int> intersection = setA * setB;
  cout << " the intersection of setA and setB: ";
  print(theUnion);
  cout << endl;
  

}
